# .github/workflows/build-windows-macos.yml

name: Build Windows & macOS Executables & Release

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*' # Trigger on creating tags starting with v (for releases)
  workflow_dispatch: # Allow manual trigger from GitHub Actions page

# Permissions needed to create releases and upload assets
permissions:
  contents: write

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Or your target Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies (assuming requirements.txt exists)
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
            Write-Host "Installed dependencies from requirements.txt"
          } else {
            # Install specific dependencies if no requirements.txt
            # Make sure to list all needed packages here
            pip install PySide6 networkx matplotlib
            Write-Host "requirements.txt not found. Installed core dependencies."
          }
          # Install PyInstaller
          pip install pyinstaller
        shell: pwsh # Use PowerShell for consistency on Windows

      - name: Run PyInstaller (Windows One-File)
        run: |
          pyinstaller main.py --name MediorNetCalculator --onefile --windowed --paths . --add-data "./utils/assets:assets" --icon="./utils/assets/tdmc.ico"
        shell: pwsh

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MediorNetCalculator-Windows-exe
          path: dist/MediorNetCalculator.exe

  build-macos-arm64:
    name: Build for macOS (Apple Silicon arm64)
    runs-on: macos-14 # Runner with arm64 support
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Or your target Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies (assuming requirements.txt exists)
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "Installed dependencies from requirements.txt"
          else
            # Install specific dependencies if no requirements.txt
            pip install PySide6 networkx matplotlib
            echo "requirements.txt not found. Installed core dependencies."
          fi
          # Install PyInstaller
          pip install pyinstaller

      - name: Run PyInstaller (macOS arm64 One-File)
        run: |
          pyinstaller main.py --name MediorNetCalculator --onefile --windowed --paths . --add-data "./utils/assets:assets" --icon="./utils/assets/tdmc.ico"

      - name: Zip .app bundle (arm64)
        # Ensure the .app bundle exists before zipping
        run: |
          if [ -d "dist/MediorNetCalculator.app" ]; then
            ditto -c -k --sequesterRsrc --keepParent dist/MediorNetCalculator.app dist/MediorNetCalculator-macOS-arm64.zip
            echo "Zipped .app bundle."
          else
            echo "Error: dist/MediorNetCalculator.app not found! Checking for raw executable..."
            # Optionally check for the raw executable if .app creation failed
            if [ -f "dist/MediorNetCalculator" ]; then
              echo "Found raw executable, zipping that instead (app creation might have failed)."
              zip dist/MediorNetCalculator-macOS-arm64.zip dist/MediorNetCalculator
            else
              echo "Error: Neither .app nor raw executable found in dist/ directory."
              exit 1
            fi
          fi

      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MediorNetCalculator-macOS-arm64-app-zip # Ensure this matches the release job
          path: dist/MediorNetCalculator-macOS-arm64.zip

  # Release Job (Verify paths in 'files' match artifact names)
  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos-arm64] # Depends on successful builds
    runs-on: ubuntu-latest

    steps:
      # Download all artifacts produced by build jobs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets # Download to this directory

      # List downloaded files for debugging (optional)
      - name: List downloaded files
        run: ls -R release-assets

      # Create Release and upload assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Files to upload - Paths are relative to runner workspace after download
          # Format: <download-path>/<artifact-name>/<file-in-artifact>
          files: |
            release-assets/MediorNetCalculator-Windows-exe/MediorNetCalculator.exe
            release-assets/MediorNetCalculator-macOS-arm64-app-zip/MediorNetCalculator-macOS-arm64.zip
          # Optional: Auto-generate release notes from commits/tags
          # generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for authentication
